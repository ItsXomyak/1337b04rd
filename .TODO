### 0. **Архитектура:**
domain -> core. core -> models, interfaces.
app -> services, utils, ports.
adapters -> external services(f.e. postgres, ricknmorty, handlers).

### **ЧТОБЫ НЕ ЗАБЫТЬ:**
сделать параллельную загрузку фото. 

### **Планирование: adapters**
   - [azhaxyly] ✔️ handlers for avatar, session, middleware for auth and logger,rickmorty 
   - [mromanul] ✔️ handlers for threads, comments, s3

### **Планирование: app/ports and app/services**
   - [azhaxyly] ✔️ rewrite auth-service to cookies,  avatar, session logic  (no more auth-service)
   - [mromanul] ✔️ threads, comments logic

### **Планирование: domain**
   - [azhaxyly] ✔️ avatar, session modules
   - [mromanul] ✔️ threads, comments modules

### 1. **Подготовка инфраструктуры проекта:**
   - [+] Настроить базовую структуру проекта (папки, модули и зависимости).
   - [+] Настроить и протестировать подключение к базе данных (PostgreSQL).
   - [+] Настроить Docker для контейнеризации проекта.
   - [+] Определить структуру тестов (например, используя `testing` в Go).

### 2. **Разработка моделей данных:**
   - [+] Определить все сущности (например, `User`, `Post`, `Comment`, `Thread`, `Avatar` и т.д.).
   - [+] Реализовать модели данных для каждой сущности (структуры Go).
   - [+] Создать и выполнить миграции базы данных для этих моделей (создать таблицы и индексы).
   - [+] Реализовать методы для работы с базой данных (CRUD) для каждой сущности.

### 3. **Реализация репозиториев:**
   - [+] Создать репозитории для работы с данными (для каждой сущности, например, `UserRepo`, `PostRepo`, и т.д.).
   - [+] Инкапсулировать работу с базой данных в репозиториях, используя SQL-запросы или ORM (например, GORM).
   - [+] Реализовать функции для CRUD операций в репозиториях.
   
### 4. **Реализация бизнес-логики (сервисы):**
   - [+] Создать сервисы для каждой сущности (например, `UserService`, `PostService`).
   - [+] Реализовать бизнес-логику в сервисах (например, обработка логики комментариев, создания/удаления постов и т.д.).
   - [+] Интегрировать сервисы с репозиториями.

### 5. **Создание HTTP-обработчиков:**
   - [+] Создать обработчики для API (например, `CreatePostHandler`, `GetPostHandler`, `CreateCommentHandler`).
   - [+] Реализовать маршруты для получения и создания сущностей через API.
   - [+] Настроить обработку запросов и ошибок в HTTP-обработчиках.
   
### 6. **Реализация аутентификации и авторизации:**
   - [ ] Настроить регистрацию пользователей (например, через email).
   - [ ] Реализовать систему аутентификации (JWT, сессии). !(надо через Cookies а не JWT)!
   - [ ] Реализовать авторизацию для разных ролей пользователей (например, администратор, модератор, обычный пользователь).
   - [ ] Настроить middleware для проверки прав доступа.

### 7. **Интеграция с внешними сервисами:**
   - [ ] Настроить интеграцию с облачными хранилищами (например, AWS S3) для загрузки и хранения изображений.
   - [ ] Настроить интеграцию с внешними API для добавления функциональности (например, для аватаров или комментариев).

### 8. **Создание фронтенда (если есть потребность):**
   - [ ] Разработать интерфейс для отображения данных (Измененный базовый фронтенд).
   - [ ] Создать страницы для регистрации, авторизации, профиля пользователя, страницы постов и комментариев.
   - [ ] Добавить интерфейс для взаимодействия с API (отправка запросов, обработка ошибок).

### 9. **Тестирование и отладка:**
   - [ ] Написать юнит-тесты для репозиториев, сервисов и обработчиков.
   - [ ] Написать интеграционные тесты для API.
   - [ ] Написать тесты для фронтенда (если разрабатываешь его).
   - [ ] Протестировать весь процесс регистрации и авторизации.
   - [ ] Провести нагрузочные тесты для проверки производительности.

### 10. **Реализация дополнительных функций:**
   - [ ] Реализовать систему уведомлений (например, уведомления о новых комментариях).
   - [ ] Добавить возможность редактирования и удаления комментариев.
   - [ ] Настроить систему логирования (например, с использованием `log` или `logrus`).
   - [ ] Реализовать модерацию контента (например, возможность помечать комментарии как спам или запрещённые).

### 11. **Документация:**
   - [ ] Написать документацию для API (например, с использованием Swagger).
   - [ ] Написать инструкцию по развёртыванию проекта и настройке окружения.
   - [ ] Обновить README с описанием проекта и его структуры.
